import math
import random

B = 16 #block size
r = math.ceil(math.log2(B))  # round up the value of r
c = B - r #capacity

def pad(M, r, l):
    padding = '0' * ((l - (len(M) + r)) % l)
    padded_data = M + '1' + padding
    return padded_data

def f(input_string):
    permuted_string = "".join(random.sample(input_string, len(input_string)))
    return permuted_string

def sponge(B, r, c, M, l, f, pad):
    P = pad(M, r, l)
    Z = ""
    s = '0' * r
    c = '0' * c

    # absorbing phase
    for i in range(0, (B // r) - 1):
        si = int(s, 2) ^ int(P[i * r: (i + 1) * r], 2)
        s = f(bin(si)[2:] + c)
        z = s[:r]
        Z += z

    # squeezing phase
    while len(Z) < l:
        s = f(s)
        z = s[:r]
        Z += z

    return Z[:l]

# input examples
B = 16
M = '111'
l = 20

print(sponge(B, r, c, M, l, f, pad))
